//! The parser parses the tokens created by the lexer and and builds an abstract syntax tree
//! from them.
//!
use crate::ast;
use crate::ast::{AstNode, BinaryOperator};
use crate::error::{FTLError, FTLErrorKind};
use crate::position_container::{PositionRange, PositionRangeContainer, PositionContainer};
use crate::token::{Token, TokenType};
use std::iter::Peekable;
use std::convert::TryFrom;

/// A parser of tokens generated by its [Lexer].
pub struct Parser<TokenIter: Iterator<Item=Token>> {
    /// The source to read the [Token]s from.
    tokens: Peekable<TokenIter>,
}

/// The result of a parsing method.
type ParseResult<T> = Result<T, FTLError>;

impl<TokenIter: Iterator<Item=Token>> Parser<TokenIter> {
    /// Creates a new Parser from the given token iterator.
    pub fn new(tokens: TokenIter) -> Self {
        Self { tokens: tokens.peekable() }
    }

    fn current_position(&mut self) -> PositionRange {
        self.tokens.peek()
            .map(|token| token.position)
            .unwrap_or(PositionRange { line: 1, column: 1..=1 })
    }

    /// Parses a binary expression, potentially followed by a sequence of (binary operator, primary expression).
    ///
    /// Note: Parentheses are a primary expression, so we don't have to worry about them here.
    fn parse_binary_expression(&mut self) -> ParseResult<ast::BinaryExpression> {
        let lhs = self.parse_primary_expression()?;
        let rhs = self.parse_binary_operation_rhs(None);
        todo!()
    }

    /// Parses a sequence of `(binary operation, primary expression)`. If this sequence is empty, it returns `lhs`.
    /// This function does not consume any tokens, if the binary operator has less precedence than `min_operator`.
    ///
    /// # Examples
    ///
    /// Think of the following expression: `a + b * c`. Then `lhs` contains `a`. This function reads the
    /// operator `+` and gets its precedence. Now the function parses the following primary expression as rhs, so
    /// here `b`. Then current_token contains `*`. This has a higher precedence than `+`, so the function recursively
    /// calls itself and parses everything on the right side until an operator is found, which precedence is not
    /// higher than `+`.
    fn parse_binary_operation_rhs(
        &mut self, min_operator: Option<BinaryOperator>
    ) -> ParseResult<Option<(ast::BinaryOperator, AstNode)>> {
        loop {
            let operator = match self.parse_operator(&min_operator) {
                Some(operator) => operator,
                // No operator, so no binary operation rhs
                None => return Ok(None)
            };
            // Parse the primary expression after the binary operator as rhs
            let mut rhs = self.parse_primary_expression()?;

            // Inspect next binary operator
            match self.tokens.peek() {
                Some(next_token) => {
                    let next_binary_operator = match ast::BinaryOperator::try_from(next_token) {
                        Ok(bin_op) => bin_op,
                        Err(_) =>
                    };
                    if operator_has_too_less_precedence(&operator, &Some(next_binary_operator)) {
                        // The next binary operator binds stronger with rhs than with current, so let
                        // it go with rhs.
                        rhs = self.parse_binary_operation_rhs(Some(operator.clone()))?;
                    }
                }
                None => (),
            };

            // Merge lhs and rhs and continue parsing
            lhs = Box::new(AstNode::BinaryExpression(ast::BinaryExpression {lhs, operator: operator.clone(), rhs }));
        }
    }

    /// Gets the next operator from [Lexer.tokens] if it is a [ast::BinaryOperator] and hos more precedence than
    /// `min_operator`.
    fn parse_operator(&mut self, min_operator: &Option<BinaryOperator>) -> Option<ast::BinaryOperator> {
        // Read the operator
        let operator = match self.tokens.peek() {
            // Expression ended here
            Some(Token { data: TokenType::EndOfLine, .. }) | None => return None,
            // Try convert the token to a BinaryOperator
            Some(token) => ast::BinaryOperator::try_from(token).ok()?,
        };
        if operator_has_too_less_precedence(&operator, &min_operator) {
            return None;
        }
        // Consume binary operator
        self.tokens.next();
        Some(operator)
    }

    fn parse_function_prototype(&mut self) -> ParseResult<ast::FunctionPrototype> {
        // Get and consume function name
        let function_name = match self.tokens.next() {
            Some(Token { data: TokenType::Identifier(identifier), position: pos }) => {
                PositionRangeContainer { data: identifier.clone(), position: pos.clone() }
            }
            other => return Err(FTLError {
                kind: FTLErrorKind::IllegalToken,
                msg: format!("Expected identifier for function prototype, got {:?}", other),
                position: self.current_position(),
            }),
        };
        // Check and consume opening parentheses
        match self.tokens.next() {
            Some(Token { data: TokenType::OpeningParentheses, .. }) => (),
            other => return Err(FTLError {
                kind: FTLErrorKind::ExpectedSymbol,
                msg: format!("Expected `(` in function prototype, got {:?}", other),
                position: self.current_position(),
            })
        }
        // Read list of arguments
        let mut arguments= self.parse_argument_list()?;
        // Check and consume closing parentheses
        match self.tokens.next() {
            Some(Token { data: TokenType::ClosingParentheses, .. }) => (),
            other => return Err(FTLError {
                kind: FTLErrorKind::ExpectedSymbol,
                msg: format!("Expected `)` in function prototype, got {:?}", other),
                position: self.current_position(),
            })
        }
        Ok(ast::FunctionPrototype { name: function_name, args: arguments })
    }

    /// Pareses a list of arguments seperated by comma, i.e. `name: type` like `answer: int`. This function parses
    /// arguments as long as they start with an identifier, so e.g. when reading a TokenType::ClosingParentheses, the
    /// parsing of arguments stops.
    fn parse_argument_list(&mut self) -> ParseResult<Vec<ast::FunctionArgument>> {
        let mut arguments = Vec::new();
        // Check if argument list starts with identifier. If not, the argument list is finished
        if let Some(Token {data: TokenType::Identifier(_), ..}) = self.tokens.peek() {} else { return Ok(arguments) }
        // Collect all arguments
        loop {
            // Get and consume argument name
            let argument_name = match self.tokens.next() {
                Some(Token {data: TokenType::Identifier(data), position}) => {
                    PositionRangeContainer {data: data.clone(), position: position.clone()}
                }
                other => return Err(FTLError {
                    kind: FTLErrorKind::IllegalToken,
                    msg: format!("Expected argument name, got {:?}", other),
                    position: self.current_position()
                })
            };
            // Check and consume colon
            match self.tokens.next() {
                Some(Token {data: TokenType::Colon, ..}) => (),
                other => return Err(FTLError {
                    kind: FTLErrorKind::IllegalToken,
                    msg: format!("Expected `:`, got {:?}", other),
                    position: self.current_position()
                })
            };
            // Get and consume argument type
            let argument_type = match self.tokens.next() {
                Some(Token {data: TokenType::Identifier(data), position}) => {
                    PositionRangeContainer {data: data.clone(), position: position.clone()}
                }
                other => return Err(FTLError {
                    kind: FTLErrorKind::IllegalToken,
                    msg: format!("Expected argument type, got {:?}", other),
                    position: self.current_position()
                })
            };
            // Check and consume comma
            match self.tokens.peek() {
                Some(Token {data: TokenType::Comma, ..}) => self.tokens.next(),
                _ => break // No comma after this argument means this is the last argument
            };
            arguments.push(ast::FunctionArgument { name: argument_name, typ: argument_type });
        }
        Ok(arguments)
    }

    fn parse_function_definition(&mut self) -> ParseResult<ast::Function> {
        let function_prototype = self.parse_function_prototype()?;
        let body = self.parse_binary_expression()?;
        return Ok(AstNode::Function(ast::Function { prototype: function_prototype, body }));
    }

    /// Parses a number.
    fn parse_number(&mut self) -> ParseResult<ast::Number> {
        Ok(match self.tokens.next() {
            Some(Token {data: TokenType::Number(number), position}) => {
                ast::Number { data: number, position }
            },
            _ => panic!("parse_number() expected number token"),
        })
    }

    /// Parses a parentheses expression, like `(4 + 5)`.
    fn parse_parentheses(&mut self) -> ParseResult<ast::BinaryExpression> {
        assert_eq!(self.tokens.next().map(|token| token.data), TokenType::OpeningParentheses);
        let inner_expression = self.parse_binary_expression()?;
        match self.tokens.next() {
            Some(Token { data: TokenType::ClosingParentheses, .. }) => (), // Ok,
            other => return Err(FTLError {
                kind: FTLErrorKind::IllegalSymbol,
                msg: format!("Expected `)`, got {:?}", other),
                position: self.current_position(),
            }),
        }
        return Ok(inner_expression);
    }

    /// Parses a variable.
    fn parse_variable(&mut self, identifier: PositionRangeContainer<String>) -> ParseResult<ast::Variable> {
        assert!(!identifier.data.is_empty());
        Ok(ast::Variable {data: identifier.data, position: identifier.position})
    }

    fn parse_extern_function(&mut self) -> ParseResult<ast::FunctionPrototype> {
        assert_eq!(self.tokens.next().map(|token| token.data), Some(TokenType::Identifier(String::from("extern"))));
        self.parse_function_prototype()
    }

    fn parse_top_level_expression(&mut self) -> ParseResult<ast::Function> {
        let expression = self.parse_binary_expression()?;
        let function_prototype = ast::FunctionPrototype {
            name: PositionRangeContainer {
                data: format!("__anonymous_function_L{}", self.current_position().line),
                position: self.current_position(),
            },
            args: vec![],
        };
        Ok(ast::Function { prototype: function_prototype, body: expression })
    }

    /// Parses a function call expression, like `add(2, 3)`.
    fn parse_function_call(&mut self, name: PositionRangeContainer<String>) -> ParseResult<ast::FunctionCall> {
        // Check and consume opening parentheses
        assert_eq!(self.tokens.next().map(|token| token.data), Some(TokenType::OpeningParentheses));
        let args = self.collect_function_call_arguments()?;
        // Check and consume closing parentheses
        assert_eq!(self.tokens.next().map(|token| token.data), Some(TokenType::ClosingParentheses));
        Ok(ast::FunctionCall { name, args })
    }

    /// Parses an identifier. The output is either a [Ast::FunctionCall] or an [Ast::Variable].
    fn parse_identifier_expression(&mut self, identifier: PositionRangeContainer<String>) -> ParseResult<ast::Expression> {
        match self.tokens.peek() {
            Some(Token { data: TokenType::OpeningParentheses, .. }) => {
                // Identifier is followed by an opening parentheses, so it must be a function call
                let function_call = self.parse_function_call(identifier)?;
                Ok(ast::Expression::FunctionCall(function_call))
            }
            _ => {
                // Identifier is followed by something else, so it is a variable
                let variable = self.parse_variable(identifier)?;
                Ok(ast::Expression::Variable(variable))
            },
        }
    }

    /// The most basic type of an expression. Primary expression are either of type identifier, number or parentheses.
    fn parse_primary_expression(&mut self) -> ParseResult<ast::Expression> {
        let current_token = self.tokens.next().ok_or(FTLError {
            kind: FTLErrorKind::ExpectedExpression,
            msg: format!("Tried parsing a primary expression, but no expression found"),
            position: self.current_position()
        })?;
        match current_token {
            Token { data: TokenType::Identifier(identifier), position } => {
                let identifier_expression = self.parse_identifier_expression(PositionRangeContainer {
                    data: identifier, position
                })?;
                Ok(identifier_expression)
            }
            Token { data: TokenType::Number(number), position } => {
                let number = self.parse_number(PositionRangeContainer { data: number, position })?;
                Some()
                todo!()
            }
            Token { data: TokenType::OpeningParentheses, .. } => {
                Some(self.parse_parentheses())
                todo!()
            },
            Token{data: TokenType::Semicolon, ..} => {
                None
                todo!()
            }
            _ => Some(Err(FTLError {
                kind: FTLErrorKind::ExpectedExpression,
                msg: format!("Expected primary expression, got {:?} instead", self.current_token),
                position: self.current_position(),
            })),
        };
        todo!()
    }
}

impl<L: Iterator<Item=Token>> Iterator for Parser<L> {
    type Item = ParseResult<ast::AstNode>;

    fn next(&mut self) -> Option<Self::Item> {
        let token = match &self.get_next_token() {
            Ok(None) => return None, // Lexer drained
            Ok(Some(tok)) => tok,
            Err(err) => return Some(Err(err.clone())),
        };
        match token {
            Token{data: TokenType::Def, .. } => Some(self.parse_function_definition()),
            Token{data: TokenType::Extern, .. } => Some(self.parse_extern_function()),
            Token{data: TokenType::Semicolon, .. } => {
                // No_op (No operation)
                self.get_next_token();
                self.next()
            },
            _ => Some(self.parse_top_level_expression()),
        }
    }
}

/// Checks if operator has lesser `precedence` than `min_operator`.
fn operator_has_too_less_precedence(operator: &ast::BinaryOperator, min_operator: &Option<ast::BinaryOperator>) -> bool {
    min_operator.map(|min_op| operator.precedence() < min_op.precedence()).unwrap_or(false)
}